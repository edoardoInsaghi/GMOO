Paper: An Efficient Genetic Algorithm with Uniform Crossover for the Multi-Objective Airport Gate Assignment Problem

Indexes start at 0, notation is meant to describe the pseudocode of C-like code.
Airplanes are numbered from 0 to NA-1, but gates from 1 to NG, this might change we'll see 

elements MOGAP (multi objective gate assignment problem):

    * NA = number of airplanes, each with [TS, TE] pair indicating time interval plane is assigned to a gate     --> 0 ≤ i < NA
    * NG = number of gates                                                                                       --> 1 ≤ g < NG

    (* P_i = planned entering times to gates
      * G_i = grounded times for planes) => known in advance

    * A_i = planned entering times to gates = scheduled arrival times to the Airport (do not worry about where the planes land?)
    * D_i = scheduled departure

    P_i = D_i - C_i

    * Qg(j) = jth airplane in queue g   1 ≤ g ≤ NG,   0 ≤ j < Hg,   ∑{g}{0, NG}(Hg) = NA
      Qg(j) = i means that the ith airplane is the jth scheduled to dwell at gate g

                | P_Qg(j)                                   if j == 0 
    * E_Qg(j) = |
                | max( P_Qg(j) , E_Qg(j-1) + G_Qg(j-1) )    if j > 0

    * W_i = waiting times on the apron (before entering the gate) = E_i - P_i

    * Dummy gate to simulate entry / exit of the Airport                   ---> NG = NG + 1
    * Dummy plane to simulate passengers entering / leaving the Airport    ---> NA = NA + 1

    * M_P(i, j), Mp belonging to R^(NA+1)x(NA+1), records number of passengers going from plane i to plane j
      Example: M_P(i, NA) is the number of arriving passengers coming from plane i to the exit of the airport
                M_P(NA, j) is the number of departing passengers leaving the airport with airplane j
                M_P(i, i) = 0 for each 0 ≤ i < NA + 1

    * M_PWD(i, j), M_PWD belonging to R^(NG+1)x(NG+1), records walking distance from gate i to gate j
    * M_BTD(i, j), M_BTD belonging to R^(NG+1)x(NG+1), records baggage traveling distance from gate i to gate j
      In general M_PWD(i, i) != 0 and M_BDT(i, i) != 0

    * V[i], V belonging to R^(NA+1), indicates the gate the ith plane is assigned to 0 ≤ V[i] < NG + 1
      V[NA] === NG, the dummy plane is always assigned to the dummy gate

    * total passenger walking distance TPWD = ∑{g}{0, NG}( ∑{j}{0, Hg-1}( ∑{i}{0, NA}( M_P(Qg(j), i) * M_PWD(g, V[i]) )))
    * total baggage traveling distance TBTD = ∑{g}{0, NG}( ∑{j}{0, Hg-1}( ∑{i}{0, NA}( M_P(Qg(j), i) * M_BTD(g, V[i]) )))
    * total passengers waiting time TPWT = ∑{i}{0, NA}( W_i * ∑{j}{0, NA}( M_P(i, j) + MP_(j, i) ))

    * Objective function J_MOGAP = alpha*TPWD + beta*TBTD + (1 - alpha - beta)*phi*TPWT
      where   alpha + beta ≤ 1,   0 ≤ alpha ≤ 1,   0 ≤ beta ≤ 1
      and phi is a suitable conversion factor from distance cost and waiting cost.
      in the paper time is measured in minutes while distance in meters. The authors assume an average walking speed of 3km/h,
      then one minute is approximately equal to 50 meters. phi is therefore chosen equal to 25, as the time spent walking is
      considered twice as uncomfortable as waiting (debatable imo).

    * MOGAP = (arg)min{Q_0, ..., Q_NG}( J_MOGAP )



A GA with Uniform Crossover (GAUC) for the MOGAP:

    * Chromosome representation: 

      (1) Based on gate assignment                                                         [3, 2, 1, 2, 1, 2, 3, 3]
          Does not encode the order of airplanes in queue at each gate.

      (2) Based on absolute position of aircrafts                                   Gate 1 [5, 3, 0, 0, 0, 0, 0, 0]
                                                                                    Gate 2 [4, 2, 6, 0, 0, 0, 0, 0]
                                                                                    Gate 3 [8, 7, 1, 0, 0, 0, 0, 0]
          Encodes necessary information, but this representation makes it
          difficult inherit and protect common (fit) genes. 

      (3) Based on gate assignment and relative position of the aircrafts                  [0, 0, 0, 0, 0, 0, 0, 0]
                                                                                           [0, 0, 0, 0, 0, 1, 0, 0]
                                                                                           [0, 0, 0, 0, 0, 0, 0, 0]
                                                                                           [0, 1, 0, 1, 0, 0, 0, 0]
                                                                                           [0, 0, 1, 0, 1, 0, 0, 0]
                                                                                           [0, 0, 0, 0, 0, 0, 0, 0]
                                                                                           [1, 0, 0, 0, 0, 0, 0, 0]
                                                                                           [0, 0, 0, 0, 0, 0, 1, 1]
                                                                                           [3, 2, 1, 2, 1, 2, 3, 3]
          Chromosome C belongs to R^(NA+1)x(NA).

          C(i, i) = 1  =>  airplane i is the first in queue at gate C(NA, i)
          C(i, j) = 1  =>  airplane j follows airplane i in queue at gate C(NA, j)

          if  C1(i, j) == 1 && C2(i, j) == 1  they point to common relative position
          if  C1(NA, j) == C2(NA, j) they point to common gate assignment 


          Feasibility conditions:
            
            - ∑{i}{0, NA-1}( ∑{j}{0, NA-1}( C(i, j) )) = NA                                                         *1

                                         | ≤ 2  if C(i, i) > 0 
            - ∑{j}{0, NA-1}( C(i, j) ) = |                                                                          *2
                                         | ≤ 1  if C(i, i) == 0 

            - ∑{i}{0, NA-1}( C(i, j) ) = 1  for each 0 ≤ j < NA                                                     *3

            - 1 ≤ ∑{i}{0, NA-1}( C(i, i) ) = NG_used ≤ NG                                                           *4

            - ∑{j}{0, NA-1}( C(j, j) ) = 1  |  C(NA, j) = g,  for each g in the set of used gates (PHI_G_used)      *5


    * Chromosome initialisation:

      - Step 1:  Create C belonging to R^(NA+1)x(NA) initialised at zero.
                 Let U = {0, 1, ..., NA-1} be the set of airplanes 
                 Let PHI_G = {1, 2, ..., NG} be the set of gates 

      - Step 2:  while U is not empty:

          - Step 2.1:  if one or more C(i, i) would violate assumption *4 for 0 ≤ i < NA:
                            select i randomly from one of the C(i, i) == 1
                            let g = C(NA, i)
                            goto Step 2.2
                       else:
                            choose i from U and g from PHI_G at random 
                            set C(i, i) = 1, set C(NA, i) = g 
                            remove i from U, remove g from PHI_G 

          - Step 2.2:  regardless of C(i, i)
                       if there is no non-zero entry in row i:
                            select j randomly from U
                            set C(i, j) = 1, set C(NA, j) = g 
                            remove j from U 
                       else:
                            find j s.t. C(i, j) = 1 
                            set i equal to j 
                            goto Step 2.2



    * Mutation operator:
      
      Assume that the representation of C is based on absolute position of the aircrafts.
      The mutation we want to perform are:
          
          (1) Shift two successive airplanes in the same queue.
              C(g, j) <==> C(g, j+1)    0 ≤ j < Hg,   0 ≤ g < NG 

          (2) Swap different airplanes in different queues / Remove one aircraft from one queue, then append it to another queue 
              C(g1, i) <==> C(g2, k)    0 ≤ j < Hg1,   0 ≤ k < Hg2+1,   g1 ≠ g2,    0 ≤ g1, g2 < NG 

      These mutations, when the chromosomes are expressed on gate assignment and relative position of the aircrafts, become:

          (3) Before: 
              [C(i, j) = 1  or  C(j, j) = 1],  C(j, m) = 1,  C(m, h) = 1   |   h -> m -> j (-> i)
              [C(i, m) = 0  or  C(m, m) = 0],  C(m, j) = 0,  C(j, h) = 0   |   
              After:
              [C(i, m) = 1  or  C(m, m) = 1],  C(m, j) = 1,  C(j, h) = 1   |   h -> j -> m (-> i)
              [C(i, j) = 0  or  C(j, j) = 0],  C(j, m) = 0,  C(m, h) = 0   |  

          (4) Before:
              C(i, j) = 1,  C(NA, j) = g1,  C(j, m) = 1 
              C(h, x) = 1,  C(NA, x) = g2,  C(x, y) = 1 
              After:
              C(NA, j) = g2,  C(NA, x) = g1
              if h != x: C(h, j) = 1,  else: C(j, j) = 1 
              if i != j: C(i, x) = 1,  else: C(x, x) = 1 
              C(j, y) = 1,  C(x, m) = 1 


    * Crossover operator:
      
      Representation in absolute position of the airplanes:
      if {C1(0, j), C1(0, j), ..., C1(NA, j)} == {C2(0, j), C2(0, j), ..., C2(NA, j)}  ≠ {0, 0, ..., 0}
      then C1(., j) <==> C2(., k)

      Additional feasibility constraint (absolute position representation): 
      C1(g, j) > 0,    C2(g, k) > 0   for 1 ≤ g ≤ NG                                                              *6
      I think this implies Hg(C1), Hg(C2)  ≥  max(j, k) for each  1 ≤ g ≤ NG
      (hopefully the implication works both ways else I'm cooked) 

      - Step 1: given two parent chromosomes C1 and C2, identify common genes 
        C3(i, j) = C1(i, j) && C(i, j) 

                    | C1(NA, j)  if C1(i, j) == C2(i, j)
        C3(NA, j) = |
                    | 0          otherwise

      - Step 2: assign gates to C3 by referring to C1 and C2
        C3(NA, j) = C1(NA, j) or C2(NA, j) with probability .5
        C3(j, j) = C1(j, j) or C2(j, j) with probabilty .5
        both operations must be subject to *6

      - Step 3: 





